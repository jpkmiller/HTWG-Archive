
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.ALL;

ENTITY hex4x7seg IS
	GENERIC (RSTDEF : STD_LOGIC := '0');
	PORT (
		rst : IN STD_LOGIC; -- reset, active RSTDEF
		clk : IN STD_LOGIC; -- clock, rising edge
		data : IN STD_LOGIC_VECTOR(15 DOWNTO 0); -- data input, active high
		dpin : IN STD_LOGIC_VECTOR(3 DOWNTO 0); -- 4 decimal point, active high
		ena : OUT STD_LOGIC_VECTOR(3 DOWNTO 0); -- 4 digit enable  signals, active high
		seg : OUT STD_LOGIC_VECTOR(7 DOWNTO 1); -- 7 connections to seven-segment display, active high
		dp : OUT STD_LOGIC); -- decimal point output, active high

	SIGNAL strb : STD_LOGIC; -- strobe for mod-4-zaehler, active high

	-- Modulo-2**14-Zaehler
	CONSTANT N14 : NATURAL := 14;
	SIGNAL cnt14 : INTEGER RANGE 0 TO N14 - 1;

	-- Modulo-4-Zaehler
	CONSTANT N4 : NATURAL := 4;
	SIGNAL ena_t : STD_LOGIC_VECTOR(3 DOWNTO 0);
	SIGNAL cnt4 : INTEGER RANGE 0 TO 3;

	-- 1-aus-4-Multiplexer
	SIGNAL dp_t : STD_LOGIC;
	SIGNAL x : STD_LOGIC_VECTOR(0 TO 3);

	-- sw for SW8 ... SW1
	SIGNAL sw : STD_LOGIC_VECTOR(8 DOWNTO 1);
	SIGNAL sw_out_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
	SIGNAL sw_out_2 : STD_LOGIC_VECTOR(3 DOWNTO 0);
	SIGNAL sw_tmp_out : STD_LOGIC_VECTOR(3 DOWNTO 0);
	SIGNAL sw_out : STD_LOGIC_VECTOR(3 DOWNTO 0);

	-- 7-aus-4-Multiplexer
	SIGNAL dec_4x7 : STD_LOGIC_VECTOR(6 DOWNTO 0);

END hex4x7seg;

ARCHITECTURE struktur OF hex4x7seg IS

BEGIN

	-- Modulo-2**14-Zaehler -> Frequenzteiler
	p1 : PROCESS (rst, clk) IS
	BEGIN
		IF rst = '1' THEN
			cnt14 <= 0;
		ELSIF rising_edge(clk) THEN
			IF cnt14 = N14 - 1 THEN
				cnt14 <= 0;
				strb <= '1'; -- set signal strb to control mod-4-zaehler
			ELSE
				cnt14 <= cnt14 + 1;
			END IF;
		END IF;
	END PROCESS;

	-- Modulo-4-Zaehler
	p2 : PROCESS (rst, clk) IS
	BEGIN
		IF rst = '1' THEN
			cnt4 <= 0;
		ELSIF rising_edge(clk) THEN
			IF strb = '1' THEN
				IF cnt4 = N4 - 1 THEN
					cnt4 <= 0;
				ELSE
					cnt4 <= cnt4 + 1;
				END IF;
			END IF;
		END IF;
	END PROCESS;

	-- 1-aus-4-Dekoder als Phasengenerator
	WITH cnt4 SELECT
		ena_t <= "0001" WHEN 0,
		"0010" WHEN 1,
		"0100" WHEN 2,
		"1000" WHEN 3;
	ena <= ena_t;

	-- 1-aus-4-Multiplexer für die Dezimalpunkte
	WITH dpin SELECT
		dp_t <= x(0) WHEN "0001",
		x(1) WHEN "0010",
		x(2) WHEN "0100",
		x(3) WHEN "1000",
		'0' WHEN OTHERS;
	dp <= dp_t;

	-- 1-aus-4-Multiplexer in zwei 4-Bit-Blöcken für die Schiebeschalter
	sw <= data(7 DOWNTO 0);
	WITH sw SELECT
		sw_out_1 <= "0001" WHEN "----0001",
		"0010" WHEN "----0010",
		"0011" WHEN "----0011",
		"0100" WHEN "----0100",
		"0101" WHEN "----0101",
		"0110" WHEN "----0110",
		"0111" WHEN "----0111",
		"1000" WHEN "----1000",
		"1001" WHEN "----1001",
		"1010" WHEN "----1010",
		"1100" WHEN "----1100",
		"1101" WHEN "----1101",
		"1110" WHEN "----1110",
		"1111" WHEN "----1111",
		"0000" WHEN OTHERS;

	WITH sw SELECT
		sw_out_2 <= "0001" WHEN "0001----",
		"0010" WHEN "0010----",
		"0011" WHEN "0011----",
		"0100" WHEN "0100----",
		"0101" WHEN "0101----",
		"0110" WHEN "0110----",
		"0111" WHEN "0111----",
		"1000" WHEN "1000----",
		"1001" WHEN "1001----",
		"1010" WHEN "1010----",
		"1100" WHEN "1100----",
		"1101" WHEN "1101----",
		"1110" WHEN "1110----",
		"1111" WHEN "1111----",
		"0000" WHEN OTHERS;

	WITH cnt4 SELECT
		sw_tmp_out <= sw_out_1 WHEN 0,
		sw_out_2 WHEN 1,
		sw_out_1 WHEN 2,
		sw_out_2 WHEN 3;

	sw_out <= sw_tmp_out;

	-- 7-aus-4-Dekoder
	WITH sw_out SELECT
		dec_4x7 <= "0111111" WHEN "0000", -- 0
		"0000110" WHEN "0001", -- 1
		"1011011" WHEN "0010", -- 2
		"1001111" WHEN "0011", -- 3
		"1100010" WHEN "0100", -- 4
		"1101101" WHEN "0101", -- 5
		"1111101" WHEN "0110", -- 6
		"0000111" WHEN "0111", -- 7
		"1111111" WHEN "1000", -- 8
		"1011111" WHEN "1001", -- 9
		"1110111" WHEN "1010", -- a
		"1111100" WHEN "1011", -- b
		"0111001" WHEN "1100", -- c
		"0111110" WHEN "1101", -- d
		"1111101" WHEN "1110", -- e
		"1110001" WHEN "1111", -- f
		"-------" WHEN OTHERS;
		seg <= dec_4x7

END struktur;