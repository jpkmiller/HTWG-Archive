.var flag
.var count

.main
.top

.acquire
mov  flag, %ax      # get flag
test $0, %ax        # if we get 0 back: lock is free!
jne  .acquire       # if not, try again
mov  $1, flag       # store 1 into flag

# critical section
mov  count, %ax     # get the value at the address
add  $1, %ax        # increment it
mov  %ax, count     # store it back

# release lock
mov  $0, flag       # clear the flag now

# see if we're still looping
sub  $1, %bx
test $0, %bx
jgt .top

halt


The assembly programm shows the function of a simple lock with a flag. 
(There might be a problem when the flag can be aquired but a context switch
issued -> Thread 1 thinks it can aquire the flag but maybe Thread 2 is already in a critical section => when switching back to Thread 1 it can easily 
set the flag to 1 and move to the critical section)

-------------------------------------------------------------------------------------------------------

No. 2

 
 python x86.py -p flag.s -R ax
ARG seed 0
ARG numthreads 2
ARG program flag.s
ARG interrupt frequency 50
ARG interrupt randomness False
ARG procsched
ARG argv
ARG load address 1000
ARG memsize 128
ARG memtrace
ARG regtrace ax
ARG cctrace False
ARG printstats False
ARG verbose False


   ax          Thread 0                Thread 1

    0
    0   1000 mov  flag, %ax
    0   1001 test $0, %ax
    0   1002 jne  .acquire
    0   1003 mov  $1, flag
    0   1004 mov  count, %ax
    1   1005 add  $1, %ax
    1   1006 mov  %ax, count
    1   1007 mov  $0, flag
    1   1008 sub  $1, %bx
    1   1009 test $0, %bx
    1   1010 jgt .top
    1   1011 halt
    0   ----- Halt;Switch -----  ----- Halt;Switch ----- 
    0                            1000 mov  flag, %ax
    0                            1001 test $0, %ax
    0                            1002 jne  .acquire
    0                            1003 mov  $1, flag
    1                            1004 mov  count, %ax
    2                            1005 add  $1, %ax
    2                            1006 mov  %ax, count
    2                            1007 mov  $0, flag
    2                            1008 sub  $1, %bx
    2                            1009 test $0, %bx
    2                            1010 jgt .top
    2                            1011 halt

-------------------------------------------------------------------------------------------------------

No. 3

python x86.py -p flag.s -a bx=1,bx=2 -R bx,ax
ARG seed 0
ARG numthreads 2
ARG program flag.s
ARG interrupt frequency 50
ARG interrupt randomness False
ARG procsched
ARG argv bx=1,bx=2
ARG load address 1000
ARG memsize 128
ARG memtrace
ARG regtrace bx,ax
ARG cctrace False
ARG printstats False
ARG verbose False


 bx    ax          Thread 0                Thread 1

    2     0
    2     0   1000 mov  flag, %ax
    2     0   1001 test $0, %ax
    2     0   1002 jne  .acquire
    2     0   1003 mov  $1, flag
    2     0   1004 mov  count, %ax
    2     1   1005 add  $1, %ax
    2     1   1006 mov  %ax, count
    2     1   1007 mov  $0, flag
    1     1   1008 sub  $1, %bx
    1     1   1009 test $0, %bx
    1     1   1010 jgt .top
    1     0   1000 mov  flag, %ax
    1     0   1001 test $0, %ax
    1     0   1002 jne  .acquire
    1     0   1003 mov  $1, flag
    1     1   1004 mov  count, %ax
    1     2   1005 add  $1, %ax
    1     2   1006 mov  %ax, count
    1     2   1007 mov  $0, flag
    0     2   1008 sub  $1, %bx
    0     2   1009 test $0, %bx
    0     2   1010 jgt .top
    0     2   1011 halt
    2     0   ----- Halt;Switch -----  ----- Halt;Switch -----
    2     0                            1000 mov  flag, %ax
    2     0                            1001 test $0, %ax
    2     0                            1002 jne  .acquire
    2     0                            1003 mov  $1, flag
    2     2                            1004 mov  count, %ax
    2     3                            1005 add  $1, %ax
    2     3                            1006 mov  %ax, count
    2     3                            1007 mov  $0, flag
    1     3                            1008 sub  $1, %bx
    1     3                            1009 test $0, %bx
    1     3                            1010 jgt .top
    1     0                            1000 mov  flag, %ax
    1     0                            1001 test $0, %ax
    1     0                            1002 jne  .acquire
    1     0                            1003 mov  $1, flag
    1     3                            1004 mov  count, %ax
    1     4                            1005 add  $1, %ax
    1     4                            1006 mov  %ax, count
    1     4                            1007 mov  $0, flag
    0     4                            1008 sub  $1, %bx
    0     4                            1009 test $0, %bx
    0     4                            1010 jgt .top
    0     4                            1011 halt


-------------------------------------------------------------------------------------------------------

No. 4

Interrupt intervalls of 6,9,20 -> good outcomes
The rest -> bad outcomes

-------------------------------------------------------------------------------------------------------

No. 5

.var mutex
.var count

.main
.top

.acquire
mov  $1, %ax
xchg %ax, mutex     # atomic swap of 1 and mutex
test $0, %ax        # if we get 0 back: lock is free!
jne  .acquire       # if not, try again

# critical section
mov  count, %ax     # get the value at the address
add  $1, %ax        # increment it
mov  %ax, count     # store it back

# release lock
mov  $0, mutex

# see if we're still looping
sub  $1, %bx
test $0, %bx
jgt .top

halt


xchg is for the atomic swap of %ax and mutex -> a is tested if equals zero => when mutex was zero (free/unlocked), a is zero now and the condition is true. 
mutex is then set to the old value of %ax 1 -> mutex is locked

mutex is released by setting the value to 0

-------------------------------------------------------------------------------------------------------

No. 6

python x86.py -p test-and-set.s -M mutex -i 10 -a bx=10,bx=10 -R ax,bx -c

It works. Mutex is 0.

-------------------------------------------------------------------------------------------------------

No. 7

python x86.py -p test-and-set.s -M mutex -i 10 -P 00111 -a bx=10,bx=10 -R ax,bx -c

The right thing happens

-------------------------------------------------------------------------------------------------------

No. 8

# array of 2 integers (each size 4 bytes)
# load address of flag into fx register
# access flag[] with 0(%fx,%index,4)
# where %index is a register holding 0 or 1
# index reg contains 0 -> flag[0], if 1->flag[1]
.var flag   2

# global turn variable
.var turn

# global count
.var count

.main

# put address of flag into fx
lea flag, %fx

# assume thread ID is in bx (0 or 1, scale by 4 to get proper flag address)
mov %bx, %cx   # bx: self, now copies to cx
neg %cx        # cx: - self
add $1, %cx    # cx: 1 - self

.acquire
mov $1, 0(%fx,%bx,4)    # flag[self] = 1
mov %cx, turn           # turn       = 1 - self

.spin1
mov 0(%fx,%cx,4), %ax   # flag[1-self] access the flag array that holds the values which thread has the flag
test $1, %ax
jne .fini               # if flag[1-self] != 1, skip past loop to .fini

.spin2                  # just labeled for fun, not needed
mov turn, %ax
test %cx, %ax           # compare 'turn' and '1 - self'
je .spin1               # if turn==1-self, go back and start spin again

# fall out of spin
.fini

# do critical section now
mov count, %ax
add $1, %ax
mov %ax, count

.release
mov $0, 0(%fx,%bx,4)    # flag[self] = 0


# end case: make sure it's other's turn
mov %cx, turn           # turn       = 1 - self
halt

In aquire the flag is aquired -> when thread holds the flag [test $1, %ax], [jne .fini] -> jump to fini if not spin till it can aquire the flag

-------------------------------------------------------------------------------------------------------

No. 9

No matter which intervall is used -> there's always one thread that finishes way earlier that the other

-------------------------------------------------------------------------------------------------------

No. 10

python x86.py -p peterson.s -M turn,count,flag -a bx=0,bx=1 -P 00000111111111 -R ax,bx,cx,fx -c
ARG seed 0
ARG numthreads 2
ARG program peterson.s
ARG interrupt frequency 50
ARG interrupt randomness False
ARG procsched 00000111111111
ARG argv bx=0,bx=1
ARG load address 1000
ARG memsize 128
ARG memtrace turn,count,flag
ARG regtrace ax,bx,cx,fx
ARG cctrace False
ARG printstats False
ARG verbose False


 turn count  flag      ax    bx    cx    fx          Thread 0                Thread 1

    0     0     0       0     0     0     0
    0     0     0       0     0     0   100   1000 lea flag, %fx
    0     0     0       0     0     0   100   1001 mov %bx, %cx
    0     0     0       0     0     0   100   1002 neg %cx
    0     0     0       0     0     1   100   1003 add $1, %cx
    0     0     1       0     0     1   100   1004 mov $1, 0(%fx,%bx,4)
    0     0     1       0     1     0     0   ------ Interrupt ------  ------ Interrupt ------
    0     0     1       0     1     0   100                            1000 lea flag, %fx
    0     0     1       0     1     1   100                            1001 mov %bx, %cx
    0     0     1       0     1    -1   100                            1002 neg %cx
    0     0     1       0     1     0   100                            1003 add $1, %cx
    0     0     1       0     1     0   100                            1004 mov $1, 0(%fx,%bx,4)
    0     0     1       0     1     0   100                            1005 mov %cx, turn
    0     0     1       1     1     0   100                            1006 mov 0(%fx,%cx,4), %ax
    0     0     1       1     1     0   100                            1007 test $1, %ax
    0     0     1       1     1     0   100                            1008 jne .fini
    0     0     1       0     0     1   100   ------ Interrupt ------  ------ Interrupt ------
    1     0     1       0     0     1   100   1005 mov %cx, turn
    1     0     1       1     0     1   100   1006 mov 0(%fx,%cx,4), %ax
    1     0     1       1     0     1   100   1007 test $1, %ax
    1     0     1       1     0     1   100   1008 jne .fini
    1     0     1       1     0     1   100   1009 mov turn, %ax
    1     0     1       1     1     0   100   ------ Interrupt ------  ------ Interrupt ------
    1     0     1       1     1     0   100                            1009 mov turn, %ax
    1     0     1       1     1     0   100                            1010 test %cx, %ax
    1     0     1       1     1     0   100                            1011 je .spin1
    1     0     1       0     1     0   100                            1012 mov count, %ax
    1     0     1       1     1     0   100                            1013 add $1, %ax
    1     1     1       1     1     0   100                            1014 mov %ax, count
    1     1     1       1     1     0   100                            1015 mov $0, 0(%fx,%bx,4)
    0     1     1       1     1     0   100                            1016 mov %cx, turn
    0     1     1       1     1     0   100                            1017 halt
    0     1     1       1     0     1   100   ----- Halt;Switch -----  ----- Halt;Switch -----
    0     1     1       1     0     1   100   1010 test %cx, %ax
    0     1     1       1     0     1   100   1011 je .spin1
    0     1     1       0     0     1   100   1006 mov 0(%fx,%cx,4), %ax
    0     1     1       0     0     1   100   1007 test $1, %ax
    0     1     1       0     0     1   100   1008 jne .fini
    0     1     1       1     0     1   100   1012 mov count, %ax
    0     1     1       2     0     1   100   1013 add $1, %ax
    0     2     1       2     0     1   100   1014 mov %ax, count
    0     2     0       2     0     1   100   1015 mov $0, 0(%fx,%bx,4)
    1     2     0       2     0     1   100   1016 mov %cx, turn
    1     2     0       2     0     1   100   1017 halt

-------------------------------------------------------------------------------------------------------

No. 11

.var ticket
.var turn
.var count

.main
.top

.acquire
mov $1, %ax
fetchadd %ax, ticket  # grab a ticket -> incrementing ticket by %ax
.tryagain
mov turn, %cx         # check if it's your turn
test %cx, %ax
jne .tryagain

# critical section
mov  count, %ax       # get the value at the address
add  $1, %ax          # increment it
mov  %ax, count       # store it back

# release lock
mov $1, %ax
fetchadd %ax, turn

# see if we're still looping
sub  $1, %bx
test $0, %bx
jgt .top

halt


It's the same code


-------------------------------------------------------------------------------------------------------

No. 12

Oh yes, they do. That's because after releasing the lock the turn is incremented -> the same thread can't
reaquire the lock and spins around.
After the interrupt the next thread is aquiring the lock -> fairness is acomplished by doing so. Each thread can aquire the lock
the same amount

-------------------------------------------------------------------------------------------------------

No. 13

It spins even more -> a lot of wasted CPU time => a spin wastes a whole CPU time slice 

-------------------------------------------------------------------------------------------------------

No. 14

.var mutex
.var count

.main
.top

.acquire
mov  $1, %ax
xchg %ax, mutex     # atomic swap of 1 and mutex
test $0, %ax        # if we get 0 back: lock is free!
je .acquire_done
yield               # if not, yield and try again
j .acquire
.acquire_done

# critical section
mov  count, %ax     # get the value at the address
add  $1, %ax        # increment it
mov  %ax, count     # store it back

# release lock
mov  $0, mutex

# see if we're still looping
sub  $1, %bx
test $0, %bx
jgt .top

halt

python ./x86.py -p test-and-set.s -M count,mutex -R ax,bx -a bx=5,bx=5 -c -i 7
python ./x86.py -p yield.s -M count,mutex -R ax,bx -a bx=5,bx=5 -c -i 7

-------------------------------------------------------------------------------------------------------

No. 15

.var mutex
.var count

.main
.top

.acquire
mov  mutex, %ax
test $0, %ax
jne .acquire
mov  $1, %ax
xchg %ax, mutex     # atomic swap of 1 and mutex
test $0, %ax        # if we get 0 back: lock is free!
jne .acquire        # if not, try again

# critical section
mov  count, %ax     # get the value at the address
add  $1, %ax        # increment it
mov  %ax, count     # store it back

# release lock
mov  $0, mutex

# see if we're still looping
sub  $1, %bx
test $0, %bx
jgt .top

halt


The key difference is that test-and-test-and-set.s spins directly when mutex is not free thus avoiding unneccessary writing