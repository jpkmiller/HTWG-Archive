#include <stdio.h>

#include "mythreads.h"

int balance = 0;

void* worker(void* arg) {
    balance++; // unprotected access
    return NULL;
}

int main(int argc, char *argv[]) {
    pthread_t p;
    Pthread_create(&p, NULL, worker, NULL);
    balance++; // unprotected access
    Pthread_join(p, NULL);
    return 0;
}

valgrind --tool=helgrind ./main-race
==1272== Helgrind, a thread error detector
==1272== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==1272== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==1272== Command: ./main-race
==1272==
==1272== ---Thread-Announcement------------------------------------------
==1272==
==1272== Thread #1 is the program's root thread
==1272==
==1272== ---Thread-Announcement------------------------------------------
==1272==
==1272== Thread #2 was created
==1272==    at 0x49734BE: clone (clone.S:71)
==1272==    by 0x485FDDE: create_thread (createthread.c:101)
==1272==    by 0x486180D: pthread_create@@GLIBC_2.2.5 (pthread_create.c:826)
==1272==    by 0x483C6B7: pthread_create_WRK (hg_intercepts.c:427)
==1272==    by 0x10940C: Pthread_create (mythreads.h:51)
==1272==    by 0x1094CF: main (main-race.c:14)
==1272==
==1272== ----------------------------------------------------------------
==1272==
==1272== Possible data race during read of size 4 at 0x10C07C by thread #1
==1272== Locks held: none
==1272==    at 0x1094D0: main (main-race.c:15)
==1272==
==1272== This conflicts with a previous write of size 4 by thread #2
==1272== Locks held: none
==1272==    at 0x109497: worker (main-race.c:8)
==1272==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==1272==    by 0x4860FA2: start_thread (pthread_create.c:486)
==1272==    by 0x49734CE: clone (clone.S:95)
==1272==  Address 0x10c07c is 0 bytes inside data symbol "balance"
==1272==
==1272== ----------------------------------------------------------------
==1272==
==1272== Possible data race during write of size 4 at 0x10C07C by thread #1
==1272== Locks held: none
==1272==    at 0x1094D9: main (main-race.c:15)
==1272==
==1272== This conflicts with a previous write of size 4 by thread #2
==1272== Locks held: none
==1272==    at 0x109497: worker (main-race.c:8)
==1272==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==1272==    by 0x4860FA2: start_thread (pthread_create.c:486)
==1272==    by 0x49734CE: clone (clone.S:95)
==1272==  Address 0x10c07c is 0 bytes inside data symbol "balance"
==1272==
==1272==
==1272== For counts of detected and suppressed errors, rerun with: -v
==1272== Use --history-level=approx or =none to gain increased speed, at
==1272== the cost of reduced accuracy of conflicting-access information
==1272== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

It shows which threads were created and what routines executed. Furthermore when executing with valgrind -v option there is much more information.
It does point to the lines of code where the critical section is. 

----------------------------------------------------------------------------------------------------------

No. 2

valgrind --tool=helgrind ./main-race
==3049== Helgrind, a thread error detector
==3049== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==3049== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==3049== Command: ./main-race
==3049==
==3049==
==3049== For counts of detected and suppressed errors, rerun with: -v
==3049== Use --history-level=approx or =none to gain increased speed, at
==3049== the cost of reduced accuracy of conflicting-access information
==3049== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Helgrind doesn't show anything when there is no critical section.
And it doesn't show anything when there is a lock but neither a critical section nor a race.

 valgrind --tool=helgrind ./main-race
==3951== Helgrind, a thread error detector
==3951== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==3951== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==3951== Command: ./main-race
==3951==
==3951== ---Thread-Announcement------------------------------------------
==3951==
==3951== Thread #1 is the program's root thread
==3951==
==3951== ---Thread-Announcement------------------------------------------
==3951==
==3951== Thread #2 was created
==3951==    at 0x49734BE: clone (clone.S:71)
==3951==    by 0x485FDDE: create_thread (createthread.c:101)
==3951==    by 0x486180D: pthread_create@@GLIBC_2.2.5 (pthread_create.c:826)
==3951==    by 0x483C6B7: pthread_create_WRK (hg_intercepts.c:427)
==3951==    by 0x10940C: Pthread_create (mythreads.h:51)
==3951==    by 0x1094F7: main (main-race.c:16)
==3951==
==3951== ----------------------------------------------------------------
==3951==
==3951==  Lock at 0x1FFF0007F0 was first observed
==3951==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==3951==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==3951==    by 0x109503: main (main-race.c:17)
==3951==  Address 0x1fff0007f0 is on thread #1's stack
==3951==  in frame #0, created by main (main-race.c:12)
==3951==
==3951== Possible data race during read of size 4 at 0x10C07C by thread #1
==3951== Locks held: 1, at address 0x1FFF0007F0
==3951==    at 0x109504: main (main-race.c:18)
==3951==
==3951== This conflicts with a previous write of size 4 by thread #2
==3951== Locks held: none
==3951==    at 0x109497: worker (main-race.c:8)
==3951==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==3951==    by 0x4860FA2: start_thread (pthread_create.c:486)
==3951==    by 0x49734CE: clone (clone.S:95)
==3951==  Address 0x10c07c is 0 bytes inside data symbol "balance"
==3951==
==3951== ----------------------------------------------------------------
==3951==
==3951==  Lock at 0x1FFF0007F0 was first observed
==3951==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==3951==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==3951==    by 0x109503: main (main-race.c:17)
==3951==  Address 0x1fff0007f0 is on thread #1's stack
==3951==  in frame #0, created by main (main-race.c:12)
==3951==
==3951== Possible data race during write of size 4 at 0x10C07C by thread #1
==3951== Locks held: 1, at address 0x1FFF0007F0
==3951==    at 0x10950D: main (main-race.c:18)
==3951==
==3951== This conflicts with a previous write of size 4 by thread #2
==3951== Locks held: none
==3951==    at 0x109497: worker (main-race.c:8)
==3951==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==3951==    by 0x4860FA2: start_thread (pthread_create.c:486)
==3951==    by 0x49734CE: clone (clone.S:95)
==3951==  Address 0x10c07c is 0 bytes inside data symbol "balance"
==3951==
==3951==
==3951== For counts of detected and suppressed errors, rerun with: -v
==3951== Use --history-level=approx or =none to gain increased speed, at
==3951== the cost of reduced accuracy of conflicting-access information
==3951== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Helgrind recognizes when there is only one lock in a thread. It warns that there might be a race
when the other critical section is still unlocked.

#include <stdio.h>

#include "mythreads.h"

int balance = 0;

void* worker(void* arg) {
    pthread_mutex_t *argLock = (pthread_mutex_t *) arg;
    Pthread_mutex_lock(argLock);
    balance++; // unprotected access
    Pthread_mutex_unlock(argLock);
    return NULL;
}

int main(int argc, char *argv[]) {
    pthread_t p;
    pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;

    Pthread_create(&p, NULL, worker, &lock);
    Pthread_mutex_lock(&lock);
    balance++; // unprotected access
    Pthread_mutex_unlock(&lock);
    Pthread_join(p, NULL);
    return 0;
}

Helgrind doesn't return any warnings when locking all critical sections.

Thread #2 unlocked an invalid lock at 0x1FFF0007F0

is returned when there is only an unlock.

Thread #2: Exiting thread still holds 1 lock
==6098==    at 0x4861066: __exit_thread (exit-thread.h:36)
==6098==    by 0x4861066: start_thread (pthread_create.c:607)
==6098==    by 0x49734CE: clone (clone.S:95)

is returned when Thread 2 is locking the critical section.

----------------------------------------------------------------------------------------------------------

No. 3

#include <stdio.h>

#include "mythreads.h"

pthread_mutex_t m1 = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t m2 = PTHREAD_MUTEX_INITIALIZER;

void* worker(void* arg) {
    if ((long long) arg == 0) {
        Pthread_mutex_lock(&m1);
        Pthread_mutex_lock(&m2);
    } else {
        Pthread_mutex_lock(&m2);
        Pthread_mutex_lock(&m1);
    }
    Pthread_mutex_unlock(&m1);
    Pthread_mutex_unlock(&m2);
    return NULL;
}

int main(int argc, char *argv[]) {
    pthread_t p1, p2;
    Pthread_create(&p1, NULL, worker, (void *) (long long) 0);
    Pthread_create(&p2, NULL, worker, (void *) (long long) 1);
    Pthread_join(p1, NULL);
    Pthread_join(p2, NULL);
    return 0;
}

This code has a deadlock when Thread 2 has started and locks m1 and Thread 3 has started too and locks m2. Then
there will be two Threads locking each other because noone has the other lock. Both Threads will wait till they get the lock.

----------------------------------------------------------------------------------------------------------

No. 4

valgrind --tool=helgrind main-deadlock
valgrind: main-deadlock: command not found
jo391mue@ct-bsys-ws19-3:~/Documents/BSYS/27_API$ valgrind --tool=helgrind ./main-deadlock
==7467== Helgrind, a thread error detector
==7467== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==7467== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==7467== Command: ./main-deadlock
==7467==
==7467== ---Thread-Announcement------------------------------------------
==7467==
==7467== Thread #3 was created
==7467==    at 0x49734BE: clone (clone.S:71)
==7467==    by 0x485FDDE: create_thread (createthread.c:101)
==7467==    by 0x486180D: pthread_create@@GLIBC_2.2.5 (pthread_create.c:826)
==7467==    by 0x483C6B7: pthread_create_WRK (hg_intercepts.c:427)
==7467==    by 0x10940C: Pthread_create (mythreads.h:51)
==7467==    by 0x109532: main (main-deadlock.c:24)
==7467==
==7467== ----------------------------------------------------------------
==7467==
==7467== Thread #3: lock order "0x10C0A0 before 0x10C0E0" violated
==7467==
==7467== Observed (incorrect) order is: acquisition of lock at 0x10C0E0
==7467==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==7467==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==7467==    by 0x1094BE: worker (main-deadlock.c:13)
==7467==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==7467==    by 0x4860FA2: start_thread (pthread_create.c:486)
==7467==    by 0x49734CE: clone (clone.S:95)
==7467==
==7467==  followed by a later acquisition of lock at 0x10C0A0
==7467==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==7467==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==7467==    by 0x1094CA: worker (main-deadlock.c:14)
==7467==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==7467==    by 0x4860FA2: start_thread (pthread_create.c:486)
==7467==    by 0x49734CE: clone (clone.S:95)
==7467==
==7467== Required order was established by acquisition of lock at 0x10C0A0
==7467==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==7467==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==7467==    by 0x1094A4: worker (main-deadlock.c:10)
==7467==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==7467==    by 0x4860FA2: start_thread (pthread_create.c:486)
==7467==    by 0x49734CE: clone (clone.S:95)
==7467==
==7467==  followed by a later acquisition of lock at 0x10C0E0
==7467==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==7467==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==7467==    by 0x1094B0: worker (main-deadlock.c:11)
==7467==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==7467==    by 0x4860FA2: start_thread (pthread_create.c:486)
==7467==    by 0x49734CE: clone (clone.S:95)
==7467==
==7467==  Lock at 0x10C0A0 was first observed
==7467==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==7467==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==7467==    by 0x1094A4: worker (main-deadlock.c:10)
==7467==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==7467==    by 0x4860FA2: start_thread (pthread_create.c:486)
==7467==    by 0x49734CE: clone (clone.S:95)
==7467==  Address 0x10c0a0 is 0 bytes inside data symbol "m1"
==7467==
==7467==  Lock at 0x10C0E0 was first observed
==7467==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==7467==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==7467==    by 0x1094B0: worker (main-deadlock.c:11)
==7467==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==7467==    by 0x4860FA2: start_thread (pthread_create.c:486)
==7467==    by 0x49734CE: clone (clone.S:95)
==7467==  Address 0x10c0e0 is 0 bytes inside data symbol "m2"
==7467==
==7467==
==7467==
==7467== For counts of detected and suppressed errors, rerun with: -v
==7467== Use --history-level=approx or =none to gain increased speed, at
==7467== the cost of reduced accuracy of conflicting-access information
==7467== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 7 from 7)

Lock order violated.

----------------------------------------------------------------------------------------------------------

No. 5

 valgrind --tool=helgrind ./main-deadlock-global
==9168== Helgrind, a thread error detector
==9168== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==9168== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==9168== Command: ./main-deadlock-global
==9168==
==9168== ---Thread-Announcement------------------------------------------
==9168==
==9168== Thread #3 was created
==9168==    at 0x49734BE: clone (clone.S:71)
==9168==    by 0x485FDDE: create_thread (createthread.c:101)
==9168==    by 0x486180D: pthread_create@@GLIBC_2.2.5 (pthread_create.c:826)
==9168==    by 0x483C6B7: pthread_create_WRK (hg_intercepts.c:427)
==9168==    by 0x10940C: Pthread_create (mythreads.h:51)
==9168==    by 0x10954A: main (main-deadlock-global.c:27)
==9168==
==9168== ----------------------------------------------------------------
==9168==
==9168== Thread #3: lock order "0x10C0E0 before 0x10C120" violated
==9168==
==9168== Observed (incorrect) order is: acquisition of lock at 0x10C120
==9168==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==9168==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==9168==    by 0x1094CA: worker (main-deadlock-global.c:15)
==9168==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==9168==    by 0x4860FA2: start_thread (pthread_create.c:486)
==9168==    by 0x49734CE: clone (clone.S:95)
==9168==
==9168==  followed by a later acquisition of lock at 0x10C0E0
==9168==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==9168==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==9168==    by 0x1094D6: worker (main-deadlock-global.c:16)
==9168==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==9168==    by 0x4860FA2: start_thread (pthread_create.c:486)
==9168==    by 0x49734CE: clone (clone.S:95)
==9168==
==9168== Required order was established by acquisition of lock at 0x10C0E0
==9168==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==9168==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==9168==    by 0x1094B0: worker (main-deadlock-global.c:12)
==9168==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==9168==    by 0x4860FA2: start_thread (pthread_create.c:486)
==9168==    by 0x49734CE: clone (clone.S:95)
==9168==
==9168==  followed by a later acquisition of lock at 0x10C120
==9168==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==9168==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==9168==    by 0x1094BC: worker (main-deadlock-global.c:13)
==9168==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==9168==    by 0x4860FA2: start_thread (pthread_create.c:486)
==9168==    by 0x49734CE: clone (clone.S:95)
==9168==
==9168==  Lock at 0x10C0E0 was first observed
==9168==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==9168==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==9168==    by 0x1094B0: worker (main-deadlock-global.c:12)
==9168==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==9168==    by 0x4860FA2: start_thread (pthread_create.c:486)
==9168==    by 0x49734CE: clone (clone.S:95)
==9168==  Address 0x10c0e0 is 0 bytes inside data symbol "m1"
==9168==
==9168==  Lock at 0x10C120 was first observed
==9168==    at 0x4839CCC: mutex_lock_WRK (hg_intercepts.c:909)
==9168==    by 0x10928F: Pthread_mutex_lock (mythreads.h:23)
==9168==    by 0x1094BC: worker (main-deadlock-global.c:13)
==9168==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==9168==    by 0x4860FA2: start_thread (pthread_create.c:486)
==9168==    by 0x49734CE: clone (clone.S:95)
==9168==  Address 0x10c120 is 0 bytes inside data symbol "m2"
==9168==
==9168==
==9168==
==9168== For counts of detected and suppressed errors, rerun with: -v
==9168== Use --history-level=approx or =none to gain increased speed, at
==9168== the cost of reduced accuracy of conflicting-access information
==9168== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 7 from 7)

Helgrind is missing the global lock. When Thread 1 or Thread 2 locks g the other thread can't lock any of the m1 or m2 -> there is no deadlock anymore.
Helgrind is not perfect.

----------------------------------------------------------------------------------------------------------

No. 6

#include <stdio.h>

#include "mythreads.h"

int done = 0;

void* worker(void* arg) {
    printf("this should print first\n");
    done = 1;
    return NULL;
}

int main(int argc, char *argv[]) {
    pthread_t p;
    Pthread_create(&p, NULL, worker, NULL);
    while (done == 0)
        ;
    printf("this should print last\n");
    return 0;
}

Parent spins and takes up a lot of CPU instead of just waiting for the child with pthread_cond_wait

----------------------------------------------------------------------------------------------------------

No. 7

valgrind --tool=helgrind ./main-signal
==9542== Helgrind, a thread error detector
==9542== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==9542== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==9542== Command: ./main-signal
==9542==
this should print first
==9542== ---Thread-Announcement------------------------------------------
==9542==
==9542== Thread #1 is the program's root thread
==9542==
==9542== ---Thread-Announcement------------------------------------------
==9542==
==9542== Thread #2 was created
==9542==    at 0x49734BE: clone (clone.S:71)
==9542==    by 0x485FDDE: create_thread (createthread.c:101)
==9542==    by 0x486180D: pthread_create@@GLIBC_2.2.5 (pthread_create.c:826)
==9542==    by 0x483C6B7: pthread_create_WRK (hg_intercepts.c:427)
==9542==    by 0x10941C: Pthread_create (mythreads.h:51)
==9542==    by 0x1094EA: main (main-signal.c:15)
==9542==
==9542== ----------------------------------------------------------------
==9542==
==9542== Possible data race during read of size 4 at 0x10C084 by thread #1
==9542== Locks held: none
==9542==    at 0x1094EC: main (main-signal.c:16)
==9542==
==9542== This conflicts with a previous write of size 4 by thread #2
==9542== Locks held: none
==9542==    at 0x1094AE: worker (main-signal.c:9)
==9542==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==9542==    by 0x4860FA2: start_thread (pthread_create.c:486)
==9542==    by 0x49734CE: clone (clone.S:95)
==9542==  Address 0x10c084 is 0 bytes inside data symbol "done"
==9542==
==9542== ----------------------------------------------------------------
==9542==
==9542== Possible data race during write of size 1 at 0x523F1A5 by thread #1
==9542== Locks held: none
==9542==    at 0x48425C6: mempcpy (vg_replace_strmem.c:1536)
==9542==    by 0x48F59E4: _IO_new_file_xsputn (fileops.c:1243)
==9542==    by 0x48F59E4: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1204)
==9542==    by 0x48EB9DD: puts (ioputs.c:40)
==9542==    by 0x109501: main (main-signal.c:18)
==9542==  Address 0x523f1a5 is 21 bytes inside a block of size 1,024 alloc'd
==9542==    at 0x48367CF: malloc (vg_replace_malloc.c:299)
==9542==    by 0x48E971B: _IO_file_doallocate (filedoalloc.c:101)
==9542==    by 0x48F76FF: _IO_doallocbuf (genops.c:347)
==9542==    by 0x48F6987: _IO_file_overflow@@GLIBC_2.2.5 (fileops.c:752)
==9542==    by 0x48F5A8E: _IO_new_file_xsputn (fileops.c:1251)
==9542==    by 0x48F5A8E: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1204)
==9542==    by 0x48EB9DD: puts (ioputs.c:40)
==9542==    by 0x1094AD: worker (main-signal.c:8)
==9542==    by 0x483C8B6: mythread_wrapper (hg_intercepts.c:389)
==9542==    by 0x4860FA2: start_thread (pthread_create.c:486)
==9542==    by 0x49734CE: clone (clone.S:95)
==9542==  Block was alloc'd by thread #2
==9542==
this should print last
==9542==
==9542== For counts of detected and suppressed errors, rerun with: -v
==9542== Use --history-level=approx or =none to gain increased speed, at
==9542== the cost of reduced accuracy of conflicting-access information
==9542== ERROR SUMMARY: 23 errors from 2 contexts (suppressed: 40 from 40)

Possible race of write. It is not correct, because printf is a critical section


----------------------------------------------------------------------------------------------------------

No. 8

It is correctness and deterministism because both threads are synchronizing. Furthermore main is not spinning anymore and therefore
saving a lot of CPU time and performance.

----------------------------------------------------------------------------------------------------------

No. 9

No error when running helgrind